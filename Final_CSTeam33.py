from tkinter import *import pymysqlimport dateutilimport datetimeimport timeclass GUI():    def __init__(self, rootWin):        self.win = rootWin        self.loginPage()            def loginPage(self):        ##GUI stuff for loginPage        self.win.title("Login Screen")        self.loginLabel = Label(self.win,text="Login")        self.userLabel = Label(self.win,text="Username")        self.passwordLabel = Label(self.win,text="Password")        self.loginButton = Button(self.win,text="Login",command=self.loginCheck)        self.registerButton = Button(self.win,text="Register",command=self.registerPage)        self.quitButton = Button(self.win,text="Quit",command=self.onQuit)        self.loginEntry = Entry(self.win)        self.passwordEntry = Entry(self.win,show="*")        self.loginLabel.grid(row=0,column=2,sticky="W")        self.userLabel.grid(row=1,column=0)        self.passwordLabel.grid(row=2,column=0)        self.loginButton.grid(row=3,column=1)        self.registerButton.grid(row=3,column=2,sticky="W")        self.loginEntry.grid(row=1,column=2)        self.passwordEntry.grid(row=2,column=2)        self.quitButton.grid(row=3,column=0,sticky="E")    def loginCheck(self):        db = self.connect()        cursor = db.cursor()        sql = "SELECT username, password FROM customer"        cursor.execute(sql)        db.close()        status = False                for record in cursor:                        if self.loginEntry.get() == record[0]:                if self.passwordEntry.get() == record[1]:                    self.message = messagebox.showinfo("Login successful!", "Logged in successfully!")                    self.chooseFunctionality()                    status = True                            if status != True:            status = self.loginCheckManager()                            if status == False:            self.message = messagebox.showerror("User not found!", "Unrecognizable username/password combination!")    def loginCheckManager(self):        db = self.connect()        cursor = db.cursor()        sql = "SELECT username, password FROM manager"        cursor.execute(sql)        db.close()        status = False        for record in cursor:                        if self.loginEntry.get() == record[0]:                if self.passwordEntry.get() == record[1]:                    self.message = messagebox.showinfo("Login successful!", "Logged in successfully!")                    status = True                    self.chooseFuncManager()        return status                                    def connect(self):        try:            db = pymysql.connect(host = "academic-mysql.cc.gatech.edu", passwd = "fvgtVLcY", user = "cs4400_Team_31", db = "cs4400_Team_31")            return db        except:            self.errorWin = messagebox.showerror("No Internet Connection", "Please check your Internet connection!")                def chooseFunctionality(self):        ##GUI stuff for chooseFunc page        self.ticketList = []        self.win.withdraw()        self.chooseFunc = Toplevel()        self.chooseFunc.title("Choose Functionality")        self.label = Label(self.chooseFunc,text="Choose Functionality")        self.viewTrainScheduleButton = Button(self.chooseFunc,text="View Train Schedule",command=self.trainSchedule)        self.viewTrainScheduleButton.config(height = 0,width=20)        self.makeNewReservationButton = Button(self.chooseFunc,text="Make a new Reservation",command=self.makeRes)        self.makeNewReservationButton.config(height = 0, width=20)        self.updateReservationButton = Button(self.chooseFunc,text="Update a Rerservation",command=self.updateRes)        self.updateReservationButton.config(height=0, width=20)        self.cancelReservationButton = Button(self.chooseFunc,text="Cancel a Reservation",command=self.cancelRes)        self.cancelReservationButton.config(height=0,width=20)        self.giveReviewButton = Button(self.chooseFunc,text="Give Review",command=self.giveReview)        self.giveReviewButton.config(height=0,width=20)        self.viewReviewButton = Button(self.chooseFunc, text = "View Review", command = self.viewReview)        self.viewReviewButton.config(height = 0, width = 20)        self.addSchoolInfoButton = Button(self.chooseFunc,text="Add school information",command=self.schoolInfo)        self.addSchoolInfoButton.config(height=0,width=20)        self.logoutButton = Button(self.chooseFunc,text="Log Out",command=self.onLogout)        self.label.grid(row=0,column=1)        self.viewTrainScheduleButton.grid(row=1,column=1,sticky="W",ipadx=5)        self.makeNewReservationButton.grid(row=2,column=1,sticky="W",ipadx=5)        self.updateReservationButton.grid(row=3,column=1,sticky="W",ipadx=5)        self.cancelReservationButton.grid(row=4,column=1,sticky="W",ipadx=5)        self.giveReviewButton.grid(row=5,column=1,sticky="W",ipadx=5)        self.viewReviewButton.grid(row = 6, column =1, sticky = "W", ipadx=5)        self.addSchoolInfoButton.grid(row=7,column=1,sticky="W",ipadx=5)        self.logoutButton.grid(row=8,column=1)            def trainSchedule(self):        ##GUI stuff for trainSchedule page        self.chooseFunc.withdraw()        self.trainScheduleWin = Toplevel()        self.viewTrainSched = Label(self.trainScheduleWin, text = "View Train Schedule")         self.trainNum = Label(self.trainScheduleWin, text = "Train Number")        self.trainNumInput = Entry(self.trainScheduleWin)        self.searchButt = Button(self.trainScheduleWin, text = "Search", command = self.searchTrainCheck)        self.trainNum.grid(row = 1, column = 0)        self.viewTrainSched.grid(row = 0, column = 0, columnspan = 2)        self.trainNumInput.grid(row = 1, column = 1)        self.searchButt.grid(row = 2, column = 1)        self.backButt = Button(self.trainScheduleWin, text = "Back", command = self.backFromTrainSchedule)        self.backButt.grid(row = 2, column = 0)    def searchTrainCheck(self):        try:            trainNum = int(self.trainNumInput.get())        except:            messagebox.showerror("Error!", "Train doesn't exist! Enter valid train number!")            return;        db = self.connect()        cursor = db.cursor()        sql = "SELECT train_number FROM train_route"        cursor.execute(sql)        db.close()        status = False        for record in cursor:            if record[0] == trainNum:                status = True                        if status == False:            self.message = messagebox.showerror("Error!", "Train doesn't exist! Enter valid train number!")        if status == True:            self.searchTrain()    def backFromTrainSchedule(self):        self.trainScheduleWin.withdraw()        self.chooseFunc.deiconify()    def searchTrain(self):        ##Searches for train info based on train number        trainNum = int(self.trainNumInput.get())        self.searchTrainWin = Toplevel(self.trainScheduleWin)        self.trainScheduleWin.withdraw()                self.searchTrainWin.title("Search Train")        self.backButt = Button(self.searchTrainWin, text = "Back to Choose Functionality", command = self.backFromSearchTrain)        self.backButt.grid(row = 0, column = 0)        self.trainNumLabel = Label(self.searchTrainWin, text = "Train Number")        self.trainNumLabel.grid(row = 1, column = 0)        self.trainNumLabelActual = Label(self.searchTrainWin, text = str(trainNum))        self.trainNumLabelActual.grid(row = 2, column = 0)        self.arrivalTimeLabel = Label(self.searchTrainWin, text = "Arrival Time")        self.arrivalTimeLabel.grid(row = 1, column = 1)        self.deptTimeLabel = Label(self.searchTrainWin, text = "Departure Time")        self.deptTimeLabel.grid(row = 1, column = 2)        self.stationLabel = Label(self.searchTrainWin, text = "Station")        self.stationLabel.grid(row = 1, column = 3)        db = self.connect()        cursor = db.cursor()        sql = "SELECT * FROM stop WHERE train_number =" + str(trainNum) + " ORDER BY arrivesTime ASC"         cursor.execute(sql)        db.close()        row = 2        for record in cursor:            arrive = record[0]            depart = record[1]            name = record[3]            self.newArrive = Label(self.searchTrainWin, text = arrive)            self.newDepart = Label(self.searchTrainWin, text = depart)            self.station = Label(self.searchTrainWin, text = name)            self.newArrive.grid(row = row, column = 1)            self.newDepart.grid(row = row, column = 2)            self.station.grid(row = row, column = 3)            row += row    def backFromSearchTrain(self):        self.searchTrainWin.withdraw()        self.chooseFunc.deiconify()           def makeRes(self):        db = self.connect()        cursor = db.cursor()        sql = "SELECT * FROM station"        cursor.execute(sql)        db.close()        self.stationList = []        for record in cursor:            name = record[0]            location = record[1]            self.stationList.append(location + " (" + name + ")")        self.chooseFunc.withdraw()        self.makeResWin = Toplevel()        self.makeResWin.title("Make a reservation!")        self.searchTrainLabel = Label(self.makeResWin, text = "Search Train")        self.departsFrom = Label(self.makeResWin, text = "Departs From")        self.arrivesAt = Label(self.makeResWin, text = "Arrives At")        self.departDate = Label(self.makeResWin, text = "Departure Date (Format: YYYY-MM-DD)")                self.departDateInput = Entry(self.makeResWin)        self.findTrainsButt = Button(self.makeResWin, text = "Find Trains", command = self.findTrains)        self.searchTrainLabel.grid(row = 0, column = 0, columnspan = 2)        self.departsFrom.grid(row = 1, column = 0)        self.arrivesAt.grid(row = 2, column = 0)        self.departDate.grid(row = 3, column = 0)        self.departDateInput.grid(row = 3, column = 1)        self.findTrainsButt.grid(row = 4, column = 1)        self.arrivalVar = StringVar(self.makeResWin)        self.arrivalVar.set("Choose station...")        self.arrivalDrop = OptionMenu(self.makeResWin, self.arrivalVar, *self.stationList)        self.arrivalDrop.grid(row = 2, column = 1)        self.departVar = StringVar(self.makeResWin)        self.departVar.set("Choose station...")        self.departDrop = OptionMenu(self.makeResWin, self.departVar, *self.stationList)        self.departDrop.grid(row = 1, column = 1)        self.backButt = Button(self.makeResWin, text = "Back", command = self.backFromMakeRes)        self.backButt.grid(row = 4, column = 0)    def backFromMakeRes(self):        self.makeResWin.withdraw()        self.chooseFunc.deiconify()    def findTrains(self):        departDate = self.departDateInput.get()        if departDate == "":            messagebox.showerror("Error!", "Please enter a valid departure date.")            return None        self.arrivalStation  = self.arrivalVar.get()        index = self.arrivalStation.find("(")        indexend = self.arrivalStation.find(")")        arrivalStation = self.arrivalStation[index+1:indexend]        (arrivalStation)                self.departStation = self.departVar.get()        index = self.departStation.find("(")        indexend = self.departStation.find(")")        departStation = self.departStation[index+1:indexend]        (departStation)        db = self.connect()        cursor = db.cursor()        sql = "SELECT stop1.train_number, stop1.departsTime, stop2.arrivesTime, first_class_price, second_class_price FROM stop AS stop1 INNER JOIN stop as stop2 INNER JOIN train_route WHERE stop1.departsTime < stop2.arrivesTime AND stop1.name = " + "'" + departStation + "'" + " AND stop2.name = "+ "'" + arrivalStation + "'" + " AND stop1.train_number = stop2.train_number AND stop1.train_number = train_route.train_number"        cursor.execute(sql)        db.close()        self.makeResWin.withdraw()        self.selectDeptWin = Toplevel()        self.departureLabel = Label(self.selectDeptWin, text = "Select Departure")        self.departureLabel.grid(row = 0, column = 0, columnspan = 4)        self.trainLabel = Label(self.selectDeptWin, text = "Train (Train Number)")        self.trainLabel.grid(row = 1, column = 0)        self.timeLabel = Label(self.selectDeptWin, text = "Time (Duration)")        self.timeLabel.grid(row = 1, column = 1)        self.firstClassLabel = Label(self.selectDeptWin, text = "1st Class Price")        self.firstClassLabel.grid(row = 1, column = 2)        self.secondClassLabel = Label(self.selectDeptWin, text = "2nd Class Price")        self.secondClassLabel.grid(row = 1, column = 3)        row = 2        self.selectedPrice = StringVar()                for record in cursor:            tNum = record[0]            departTime = record[1]            arrivalTime = record[2]            firstClassPrice = record[3]            secondClassPrice = record[4]            self.tNumLabel = Label(self.selectDeptWin, text = tNum)            self.tNumLabel.grid(row = row, column = 0)            duration = arrivalTime - departTime            self.totalTime = Label(self.selectDeptWin, text = str(departTime) + " - " + str(arrivalTime) + " (" + str(duration) + ")")             self.totalTime.grid(row = row, column = 1)            value1 = str(tNum) + ", " + str(firstClassPrice) + ", " + str(departTime) + " - " + str(arrivalTime) + " (" + str(duration) + ")" + ", " + self.departStation + ", " + self.arrivalStation + ", " + "1st class"            value2 = str(tNum) + ", " + str(secondClassPrice) + ", " + str(departTime) + " - " + str(arrivalTime) + " (" + str(duration) + ")" + ", " + self.departStation + ", " + self.arrivalStation + ", " + "2nd class"                         self.firstClassButt = Radiobutton(self.selectDeptWin, text = str(firstClassPrice), variable = self.selectedPrice, value = value1)            self.firstClassButt.grid(row = row, column = 2)            self.secondClassButt = Radiobutton(self.selectDeptWin, text = str(secondClassPrice), variable = self.selectedPrice, value = value2)                        self.secondClassButt.grid(row = row, column = 3)            row = row + 1        self.next = Button(self.selectDeptWin, text = "Next", command = self.travelExtras)        self.next.grid(row = row, column = 3)        self.back = Button(self.selectDeptWin, text = "Back", command = self.backToMakeRes)        self.back.grid(row = row, column = 0)    def travelExtras(self):        selection = self.selectedPrice.get()        self.selectDeptWin.withdraw()        self.travelExtrasWin = Toplevel()        self.travelExtrasWin.title("Travel Extras")        self.titleLabel = Label(self.travelExtrasWin, text = "Travel Extras & Passenger Info")        self.titleLabel.grid(row = 0, column = 0, columnspan = 2)        self.numBagsLabel = Label(self.travelExtrasWin, text = "Number of Baggage")        self.numBagsLabel.grid(row = 1, column = 0)        self.numBagsVar = IntVar()        self.numBagsVar.set(1)        self.bags = [1, 2, 3, 4]        self.numBagsDrop = OptionMenu(self.travelExtrasWin, self.numBagsVar, *self.bags)        self.numBagsDrop.grid(row = 1, column = 1)        self.numBagsDisclaimer = Label(self.travelExtrasWin, text = "Every passenger can bring up to 4 bags, 2 free of charge, 2 for $30 per bag")        self.numBagsDisclaimer.grid(row = 2, column = 0, columnspan = 2)        self.passNameLabel = Label(self.travelExtrasWin, text = "Passenger Name")        self.passNameLabel.grid(row = 3, column = 0)        self.passName = StringVar()        self.passNameEntry = Entry(self.travelExtrasWin, textvariable = self.passName)        self.passNameEntry.grid(row = 3, column = 1)        self.backButt = Button(self.travelExtrasWin, command = self.backFromTravelExtras, text = "Back")        self.backButt.grid(row = 4, column = 0)        self.nextButt = Button(self.travelExtrasWin, command = self.nextFromTravelExtras, text = "Next")        self.nextButt.grid(row = 4, column = 1)        self.ticket = self.selectedPrice.get().split(", ")                                    def nextFromTravelExtras(self):        if self.passName.get() == "":            messagebox.showwarning("Error!", "Please enter a passenger name.")            return None        ##confirm reservation/add more stuff        self.ticket.append(self.numBagsVar.get())        self.ticket.append(self.passName.get())        self.ticket.append(self.departDateInput.get())        self.ticketList.append(self.ticket)        self.travelExtrasWin.withdraw()        self.makeResActual()            def backFromTravelExtras(self):        self.travelExtrasWin.withdraw()        self.selectDeptWin.deiconify()    def makeResActual(self):                self.makingRes = Toplevel(self.travelExtrasWin)        self.makingRes.title("Make Reservation")                        self.currSelected = Label(self.makingRes, text = "Currently Selected")        self.currSelected.grid(row=0,column=0)        self.trainNoLabel = Label(self.makingRes, text = "Train (Train Number)")        self.trainNoLabel.grid(row = 1, column = 0)        self.timeDur = Label(self.makingRes, text = "Depart Date and \nTime (Duration)")        self.timeDur.grid(row = 1, column = 1)        self.depFrom = Label(self.makingRes, text = "Departs From")        self.depFrom.grid(row = 1, column = 2)        self.arrAt = Label(self.makingRes, text = "Arrives At")        self.arrAt.grid(row = 1, column = 3)        self.ClassLabel = Label(self.makingRes, text = "Class")        self.ClassLabel.grid(row = 1, column = 4)        self.priceLabel = Label(self.makingRes, text = "Price")        self.priceLabel.grid(row=1, column = 5)        self.numBagg = Label(self.makingRes, text = "# Baggages")        self.numBagg.grid(row=1,column = 6)        self.passName = Label(self.makingRes, text = "Passenger Name")        self.passName.grid(row=1,column=7)        self.removeButt = Button(self.makingRes, text = "Remove Selected Ticket", command = self.removeTicket)        self.removeButt.grid(row=1,column=8)        #monthDict = {"01": "Jan", "02": "Feb", "03": "Mar": "04": "Apr", "05": "May", "06": "Jun", "07": "Jul", "08": "Aug", "09": "Sep", "10": "Oct", "11": "Nov", "12: Dec"}        r = 2        c = 0        self.totalCost = 0        self.ind= IntVar()        if self.ticketList != []:            for ticket in self.ticketList:                self.totalCost += float(ticket[1])                                if (ticket[6] > 2):                    self.totalCost += 30 * (ticket[6]-2)                                Label(self.makingRes, text = ticket[0]).grid(row=r,column=c)                c+= 1                Label(self.makingRes, text = ticket[8] + "\n" + ticket[2]).grid(row=r,column=c)                c+=1                Label(self.makingRes, text = ticket[3]).grid(row=r,column=c)                c+=1                Label(self.makingRes, text = ticket[4]).grid(row=r,column=c)                c+=1                Label(self.makingRes, text = ticket[5]).grid(row=r,column=c)                c+=1                Label(self.makingRes, text = ticket[1]).grid(row=r,column=c)                c+=1                Label(self.makingRes, text = ticket[6]).grid(row=r,column=c)                c+=1                Label(self.makingRes, text = ticket[7]).grid(row=r,column=c)                c+=1                Radiobutton(self.makingRes, variable = self.ind, value = (r-2)).grid(row=r,column=c)                r += 1                c = 0        db = self.connect()        cursor = db.cursor()        cursor.execute("SELECT isStudent FROM customer WHERE username = %s", (self.loginEntry.get()))        for i in cursor:            if i[0] == 1:                self.totalCost *= 0.8                Label(self.makingRes, text = "Student Discount Applied!").grid(row=r, column = 0)                r += 1                        self.cardList = []        cursor.execute("SELECT card_number FROM payment_information WHERE username = %s", (self.loginEntry.get()))        for card in cursor:            self.cardList.append(card[0])        db.close()        self.cardVar = StringVar(self.makingRes)        Label(self.makingRes,text = "Total Cost:     " + str(self.totalCost)).grid(row=r,column = 0)        Label(self.makingRes,text = "Use Card").grid(row=r+1,column = 0)        if len(self.cardList) != 0:            cardOption = OptionMenu(self.makingRes, self.cardVar, *self.cardList)            cardOption.grid(row=r+1,column=1)        Button(self.makingRes, text = "Add Card", command = self.addCardOption).grid(row=r+1,column=2)        Button(self.makingRes, text = "Continue Adding Train",command=self.continueAdding).grid(row=r+2, column = 0)        Button(self.makingRes, text = "Back", command = self.backFromMakeResActual).grid(row=r+3,column=0)        self.submitReservation = Button(self.makingRes, text = "Submit", command = self.helper)        self.submitReservation.grid(row=r+3,column=1)    def helper(self):        if self.cardVar.get() == "":            messagebox.showinfo("Error","Card needs to be selected!!!")            return;        self.confirmScreen()            def backFromMakeResActual(self):        self.selectDeptWin.withdraw()         self.travelExtrasWin.deiconify()                   def addCardOption(self):                self.paymentInfo = Toplevel(self.makingRes)        self.makingRes.withdraw()        self.paymentInfo.title("Payment Information")        self.leftFrame = Label(self.paymentInfo, text = "Add Card").grid(row = 0, column = 0)        self.cardName = Label(self.paymentInfo, text = "Name on Card").grid(row = 1, column = 0)        self.cardNameEntry = Entry(self.paymentInfo)        self.cardNameEntry.grid(row = 1, column = 1)        self.leftCardNum = Label(self.paymentInfo, text = "Card Number")        self.leftCardNum.grid(row = 2, column = 0)        self.leftCardNumEntry = Entry(self.paymentInfo)        self.leftCardNumEntry.grid(row = 2, column = 1)        self.myCVV = Label(self.paymentInfo, text = "CVV")        self.myCVV.grid(row = 3, column = 0)        self.myCVVEntry = Entry(self.paymentInfo)        self.myCVVEntry.grid(row = 3, column = 1)        self.myExpirationDate = Label(self.paymentInfo, text = "Expiration Date: Format(MM/YYYY)")        self.myExpirationDate.grid(row = 4, column = 0)        self.exDateEntry = Entry(self.paymentInfo)        self.exDateEntry.grid(row = 4, column = 1)        self.rightFrame = Label(self.paymentInfo, text = "Delete Card")        self.rightFrame.grid(row = 0, column = 2)        self.cardNumRight = Label(self.paymentInfo, text = "Card Number")        self.cardNumRight.grid(row = 1, column = 2)        self.cardNumEntry = Entry(self.paymentInfo)        self.cardNumEntry.grid(row = 1, column = 3)        self.submitButtonLeft = Button(self.paymentInfo, text = "Submit", command = self.submitAdd)        self.submitButtonLeft.grid(row = 5, column = 1)        self.submitButtonRight = Button(self.paymentInfo, text = "Submit", command = self.submitDelete)        self.submitButtonRight.grid(row = 5, column = 3)    def submitAdd(self):        self.exDateVal = self.exDateEntry.get()        self.CNEntryVal = self.cardNameEntry.get()        self.leftCardEntryVal = self.leftCardNumEntry.get()        self.CVVEntryVal = self.myCVVEntry.get()        if self.exDateVal == "" or self.CNEntryVal == "" or self.leftCardEntryVal == "" or self.CVVEntryVal == "":            messagebox.showerror("Error", "Please enter all fields!")            return;        elif len(self.CVVEntryVal) != 3 or len(self.leftCardEntryVal) != 16:            messagebox.showerror("Error!", "CVV or card number is invalid")        aList = self.exDateVal.split("/")        print(int(aList[0]))        print(int(aList[1]))        exDate = datetime.datetime(int(aList[1]),int(aList[0]),1)        today = datetime.datetime.today()        if exDate <= today:            messagebox.showerror("Error", "Expiration date is too soon :(")            return;                usernameSpecial = self.loginEntry.get()        db = self.connect()        cursor = db.cursor()        cursor.execute("""INSERT INTO payment_information (card_number, username, name_on_card, CVV, expiration_date) VALUES(%s,%s,%s,%s,%s)""" , (str(self.leftCardEntryVal),                                                                                                                                                   str(usernameSpecial) ,                                                                                                                                                   self.CNEntryVal,                                                                                                                                                   str(self.CVVEntryVal),                                                                                                                                                   str(self.exDateVal)))        db.commit()        db.close()        self.paymentInfo.withdraw()        self.makeResActual()    def submitDelete(self):        usernameSpecial = self.loginEntry.get()        db = self.connect()        cursor = db.cursor()        sql = "SELECT card_num FROM reservation NATURAL JOIN ticket WHERE ticket.departure_date >= CURDATE() AND reservation.isCancelled = 0 AND reservation.username = %s"        cursor.execute(sql, self.loginEntry.get())        status = True        for record in cursor:            if record[0] == self.cardNumEntry.get():                status = False        if status == False:            messagebox.showerror("Error", "You cannot delete this card")            self.makingRes.deiconify()            self.paymentInfo.destroy()            return;        realTalkTime = datetime.datetime.now()        theRealTime = realTalkTime.strftime("%Y-%m-%d")                indexedTime = str(theRealTime[0:10])        newcursor = db.cursor()        aList = newcursor.execute("""SELECT card_num, departure_date FROM reservation NATURAL JOIN ticket WHERE departure_date > %s""", indexedTime)        simpList = []        for x in newcursor:            simpList.append(x[1].strftime("%Y-%m-%d"))        sqlState = "'" + self.cardNumEntry.get() + "'"        sqlol = "DELETE FROM payment_information WHERE card_number = '{}' AND username = '{}'".format(self.cardNumEntry.get(), usernameSpecial)        if (theRealTime not in simpList):            newcursor.execute(sqlol)        db.commit()        db.close()        self.paymentInfo.withdraw()        self.makeResActual()    def confirmScreen(self):        self.makingRes.withdraw()        self.confScreen = Toplevel()        db = self.connect()        cursor = db.cursor()        print(self.totalCost)        print(type(self.totalCost))        sql = "INSERT INTO reservation (username, card_num, total_cost) VALUES ('" + self.loginEntry.get() + "', '" + self.cardVar.get() + "', '" + str(self.totalCost) + "')"        cursor.execute(sql)        cursor.execute("SELECT MAX(RID) FROM reservation")        for i in cursor:            rid = i[0]        for ticket in self.ticketList:            print(ticket)        classIns = 1        for ticket in self.ticketList:            if ticket[5] == "2nd class":                classIns = 2            startIndDep = ticket[3].find("(") + 1            endIndDep = ticket[3].find(")")            startIndArr = ticket[4].find("(") + 1            endIndArr = ticket[4].find(")")            DepSt = ticket[3][startIndDep:endIndDep]            ArrSt = ticket[4][startIndArr:endIndArr]            print(ticket[8])            cursor.execute("INSERT INTO ticket VALUES (%s, %s, %s, %s, %s, %s, %s, %s)", (str(rid), ticket[7], str(classIns), str(ticket[6]), ticket[8], str(ticket[0]), DepSt, ArrSt))         self.confScreen.title("Confirmation Screen")        self.aConfTitle = Label(self.confScreen, text = "Confirmation").grid(row = 0, column = 0)        self.resID = Label(self.confScreen, text = "Reservation ID: "+str(rid)).grid(row = 1, column = 0)        self.resIDEntry = Label(self.confScreen).grid(row = 1, column = 1)        self.resLabel = Label(self.confScreen, text = "Thank you for your purchase! Please save reservation ID for your records.").grid(row = 2, column = 0)        self.ticketList = []        self.backtoFunction = Button(self.confScreen, text = "Go Back to choose functionality", command = self.backtoSquareOne).grid(row = 4, column = 0)    def backtoSquareOne(self):        self.confScreen.withdraw()        self.chooseFunc.deiconify()            def continueAdding(self):        self.makingRes.withdraw()        self.makeRes()            def removeTicket(self):        for i in range(len(self.ticketList)):            if self.ind.get() == i:                del self.ticketList[i]        self.makingRes.destroy()        self.makeResActual()    def backToMakeRes(self):        self.selectDeptWin.withdraw()        self.makeResWin.deiconify()                def updateRes(self):        self.chooseFunc.withdraw()        self.updateResWin = Toplevel()        self.updateResWin.title("Update Reservation")        self.updateResTitle = Label(self.updateResWin, text = "Update Reservation")        self.updateResTitle.grid(row = 0, column = 0, columnspan = 3)        self.resID = Label(self.updateResWin, text = "Reservation ID")        self.resID.grid(row = 1, column = 0)        self.resIDEntry = Entry(self.updateResWin)        self.resIDEntry.grid(row = 1, column = 1)        self.search = Button(self.updateResWin, text = "Search", command = self.findRes)        self.search.grid(row = 1, column = 2)        self.back = Button(self.updateResWin, text = "Back", command = self.backFromUpdateRes)        self.back.grid(row = 2, column = 1)            def findRes(self):        self.updateResWin.withdraw()        self.newupdateRes = Toplevel()        db = self.connect()        cursor = db.cursor()        self.rid = str(self.resIDEntry.get())        sql = "SELECT * FROM reservation NATURAL JOIN ticket NATURAL JOIN train_route WHERE reservation.rid= " + "'" + str(self.resIDEntry.get()) + "'" + " AND reservation.username=" + "'" + str(self.loginEntry.get()) + "'"        cursor.execute(sql)        if(cursor.rowcount == 0):            self.backFromNewUpdateRes()            messagebox.showerror("Reservation Error","This Reservation is Invalid or Non-Existent!")            return;        self.train = Label(self.newupdateRes,text="Train\n(Train Number)")        self.train.grid(row=3,column=1)        self.time = Label(self.newupdateRes,text="Time\n(Duration)")        self.time.grid(row=3,column=2)        self.depart = Label(self.newupdateRes,text="Departs From")        self.depart.grid(row=3,column=3)        self.arrive = Label(self.newupdateRes,text="Arrives At")        self.arrive.grid(row=3,column=4)        self.clasa = Label(self.newupdateRes,text="Class")        self.clasa.grid(row=3,column=5)        self.price = Label(self.newupdateRes,text="Price")        self.price.grid(row=3,column=6)        self.bags = Label(self.newupdateRes,text="# of Bags")        self.bags.grid(row=3,column=7)        self.name = Label(self.newupdateRes,text="Passenger Name")        self.name.grid(row=3,column=8)        self.select = Label(self.newupdateRes,text="Select")            self.select.grid(row=3,column=0)        num = 0        r = 4        self.recordList = []        self.selection = IntVar()        newCursor = db.cursor()        for record in cursor:            selectButton = Radiobutton(self.newupdateRes,variable=self.selection,value=num)            selectButton.grid(row=r,column=0)            curTrain = Label(self.newupdateRes,text=record[0])            curTrain.grid(row=r,column=1)                        sexql = "SELECT * FROM stop WHERE stop.train_number= " + "'" + str(record[0]) +"'" + "and (stop.name= " + "'" + str(record[10]) + "'" + "or stop.name= " + "'" + str(record[11]) + "') ORDER BY  `stop`.`departsTime` ASC"                    newCursor.execute(sexql)            (sexql)            self.recordIndexer = 0            self.departure = None            self.arrival = None            self.changedArrival = 0            for value in newCursor:                if(self.recordIndexer == 0):                    self.departure = value[1]                    if(self.departure == None):                        self.arrival = value[0]                        self.changedArrival = 1                elif(self.recordIndexer == 1):                    if self.changedArrival == 0:                        self.arrival = value[0]                    if(self.departure == None):                        self.departure = value[1]                self.recordIndexer = self.recordIndexer + 1            (self.arrival)            (self.departure)            duration = self.arrival - self.departure            curTime = Label(self.newupdateRes,text=str(record[9]) + "\n" + str(self.departure) + " - " + str(self.arrival) + " (" + str(duration) + ")")            curTime.grid(row=r,column=2)            curDep = Label(self.newupdateRes,text=record[10])            curDep.grid(row=r,column=3)            curArr = Label(self.newupdateRes,text=record[11])            curArr.grid(row=r,column=4)            curClass = Label(self.newupdateRes,text=record[7])            curClass.grid(row=r,column=5)            curPrice = Label(self.newupdateRes,text=str(self.calcPrice(record[7],record[8],record[12],record[13]))) #needs calc price func            curPrice.grid(row=r,column=6)            curBags = Label(self.newupdateRes,text=record[8])            curBags.grid(row=r,column=7)            curName = Label(self.newupdateRes,text=record[6])            curName.grid(row=r,column=8)            self.recordList.append(record)            r = r + 1            num = num + 1        self.next = Button(self.newupdateRes,text="Next",command=self.onNext)        self.next.grid(row = r + 1, column = 1)        self.newback = Button(self.newupdateRes, text = "Back", command = self.backFromNewUpdateRes)        self.newback.grid(row = r + 1, column = 0)            def onNext(self):        self.indexed = self.selection.get()        self.updateTicket()    def updateTicket(self):        from datetime import datetime        self.newupdateRes.withdraw()        self.updateTicketWin = Toplevel()        self.updateTicketWin.title("Update Reservation")        currentTicket = Label(self.updateTicketWin,text="Current Train Ticket")        currentTicket.grid(row=0,column=0)        newTicket = Label(self.updateTicketWin,text="Updated Train Ticket")        newTicket.grid(row=4,column=0)        deptDate = Label(self.updateTicketWin,text="New Departure Date")        deptDate.grid(row=3,column=0)        self.date = StringVar()        self.current = datetime.now()        self.date.set(self.current.strftime('%Y-%m-%d'))        self.deptEntry = Entry(self.updateTicketWin,textvariable=self.date)        self.deptEntry.grid(row=3,column=1)        checkButton = Button(self.updateTicketWin,text="Search Avaliability",command=self.onUpdate)        checkButton.grid(row=3,column=2)        i = self.indexed        train = Label(self.updateTicketWin,text="Train\n(Train Number)")        train.grid(row=1,column=1)        time = Label(self.updateTicketWin,text="Time\n(Duration)")        time.grid(row=1,column=2)        depart = Label(self.updateTicketWin,text="Departs From")        depart.grid(row=1,column=3)        arrive = Label(self.updateTicketWin,text="Arrives At")        arrive.grid(row=1,column=4)        clasa = Label(self.updateTicketWin,text="Class")        clasa.grid(row=1,column=5)        price = Label(self.updateTicketWin,text="Price")        price.grid(row=1,column=6)        bags = Label(self.updateTicketWin,text="# of Bags")        bags.grid(row=1,column=7)        name = Label(self.updateTicketWin,text="Passenger Name")        name.grid(row=1,column=8)        curTrain = Label(self.updateTicketWin,text=self.recordList[i][0])        curTrain.grid(row=2,column=1)        curTime = Label(self.updateTicketWin,text=self.recordList[i][9])        curTime.grid(row=2,column=2)        curDep = Label(self.updateTicketWin,text=self.recordList[i][10])        curDep.grid(row=2,column=3)        curArr = Label(self.updateTicketWin,text=self.recordList[i][11])        curArr.grid(row=2,column=4)        curClass = Label(self.updateTicketWin,text=self.recordList[i][7])        curClass.grid(row=2,column=5)        curPrice = Label(self.updateTicketWin,text=str(self.calcPrice(self.recordList[i][7],self.recordList[i][8],self.recordList[i][12],self.recordList[i][13]))) #needs calc price func        curPrice.grid(row=2,column=6)        curBags = Label(self.updateTicketWin,text=self.recordList[i][8])        curBags.grid(row=2,column=7)        curName = Label(self.updateTicketWin,text=self.recordList[i][6])        curName.grid(row=2,column=8)    def onUpdate(self):        from datetime import datetime        db = self.connect()        cursor = db.cursor()        toUpdate = self.deptEntry.get()        check = toUpdate.split("-")        changedDate = datetime(int(check[0]),int(check[1]),int(check[2]))        i = self.indexed        saxql = "UPDATE  `cs4400_Team_31`.`ticket` SET  `departure_date` = " + "'" + changedDate.strftime('%Y-%m-%d') + "'" + " WHERE  `ticket`.`rid` =" + "'" + str(self.resIDEntry.get()) + "'" + " AND  `ticket`.`train_number` =" +"'" + str(self.recordList[i][0]) + "'"        #Check if date is within time alloted to change            currentDate = datetime.now()        timedelta = changedDate - currentDate        self.bool = 0        alist = toUpdate.split("-")        if(timedelta.days > 1 and str(check[0]) == str(alist[0])):            db = self.connect()            cursor = db.cursor()            cursor.execute(saxql)            self.bool = 1        else:            messagebox.showerror("Reservation Error","This Reservation date is incorrect!");            return;                train = Label(self.updateTicketWin,text="Train\n(Train Number)")        train.grid(row=4,column=1)        time = Label(self.updateTicketWin,text="Time\n(Duration)")        time.grid(row=4,column=2)        depart = Label(self.updateTicketWin,text="Departs From")        depart.grid(row=4,column=3)        arrive = Label(self.updateTicketWin,text="Arrives At")        arrive.grid(row=4,column=4)        clasa = Label(self.updateTicketWin,text="Class")        clasa.grid(row=4,column=5)        price = Label(self.updateTicketWin,text="Price")        price.grid(row=4,column=6)        bags = Label(self.updateTicketWin,text="# of Bags")        bags.grid(row=4,column=7)        name = Label(self.updateTicketWin,text="Passenger Name")        name.grid(row=4,column=8)        curTrain = Label(self.updateTicketWin,text=self.recordList[i][0])        curTrain.grid(row=5,column=1)        if(self.bool == 1):            curTime = Label(self.updateTicketWin,text=changedDate.strftime('%Y-%m-%d'))        else:            curTime = Label(self.updateTicketWin,text=self.recordList[i][9])        curTime.grid(row=5,column=2)        curDep = Label(self.updateTicketWin,text=self.recordList[i][10])        curDep.grid(row=5,column=3)        curArr = Label(self.updateTicketWin,text=self.recordList[i][11])        curArr.grid(row=5,column=4)        curClass = Label(self.updateTicketWin,text=self.recordList[i][7])        curClass.grid(row=5,column=5)        curPrice = Label(self.updateTicketWin,text=str(self.calcPrice(self.recordList[i][7],self.recordList[i][8],self.recordList[i][12],self.recordList[i][13]))) #needs calc price func        curPrice.grid(row=5,column=6)        curBags = Label(self.updateTicketWin,text=self.recordList[i][8])        curBags.grid(row=5,column=7)        curName = Label(self.updateTicketWin,text=self.recordList[i][6])        curName.grid(row=5,column=8)        fee = StringVar()        newPrice = StringVar()        total = 0        pricesql = "SELECT total_cost FROM reservation NATURAL JOIN ticket WHERE reservation.rid = " + "'" + str(self.resIDEntry.get())  + "'" +" AND ticket.train_number = " + "'" + str(self.recordList[i][0]) + "'"        self.connect()        newCursor = db.cursor()        (pricesql)        newCursor.execute(pricesql)        for price in newCursor:            (price[0])            total = price[0]        if(self.bool == 1):            fee.set("50")            total = total + 50        else:            fee.set("0")            total = total + 0        newPrice.set(str(total))        feeLabel = Label(self.updateTicketWin,text="Change Fee: ")        priceLabel = Label(self.updateTicketWin,text="New Total Cost: ")        feeEntry = Entry(self.updateTicketWin,textvariable=fee)        self.apriceEntry = Entry(self.updateTicketWin,textvariable=newPrice)        feeLabel.grid(row=6,column=0)        priceLabel.grid(row=7,column=0)        feeEntry.grid(row=6,column=1)        self.apriceEntry.grid(row=7,column=1)        self.bacckerButton = Button(self.updateTicketWin,text="Back",command=self.backFromTicketUpdate)        self.bacckerButton.grid(row=9,column=0)        self.submitButon = Button(self.updateTicketWin,text="Submit",command=self.updatePricesSubmit)        self.submitButon.grid(row=10,column=0)    def backFromTicketUpdate(self):        self.updateTicketWin.withdraw()        self.newupdateRes.deiconify()    def updatePricesSubmit(self):        updatesql = "UPDATE  `cs4400_Team_31`.`reservation` SET  `total_cost` =" + "'" + str(self.apriceEntry.get()) + "'" + "WHERE  `reservation`.`RID`=" + "'" + str(self.resIDEntry.get())  + "'"        db = self.connect()        newCursor = db.cursor()        newCursor.execute(updatesql)        db.commit()        db.close()        messagebox.showinfo("Update","Successfully Updated!")            def calcPrice(self,trainclass,numBags,firstprice,secondprice):        totalPrice = 0        if(trainclass == 1):            totalPrice = totalPrice + firstprice        else:            totalPrice = totalPrice + secondprice        if(numBags == 3):            totalPrice = totalPrice + 30        elif(numBags == 4):            totalPrice = totalPrice + 60        return totalPrice;     def backFromNewUpdateRes(self):        self.recordlist = []        self.newupdateRes.destroy()        self.chooseFunc.deiconify()        def backFromUpdateRes(self):        self.updateResWin.destroy()        self.chooseFunc.deiconify()            def cancelRes(self):        self.chooseFunc.withdraw()        self.cancelRes = Toplevel(self.chooseFunc)        self.cancelRes.title("Cancel Reservation")        self.cancelResTitle = Label(self.cancelRes, text = "Cancel Reservation")        self.cancelResTitle.grid(row = 0, column = 0, columnspan = 3)        self.cancelResID = Label(self.cancelRes, text = "Reservation ID")        self.cancelResID.grid(row = 1, column = 0)        self.cancelResIDInput = Entry(self.cancelRes)        self.cancelResIDInput.grid(row = 1, column = 1)        self.findResID = Button(self.cancelRes, text = "Search", command = self.cancelResCheck)        self.findResID.grid(row = 1, column = 2)        self.backButt = Button(self.cancelRes, text = "Back", command = self.backFromCancelRes)        self.backButt.grid(row = 2, column = 1)            def cancelResCheck(self):        db = self.connect()        cursor = db.cursor()        sql = "SELECT RID, isCancelled FROM reservation WHERE username =" + "'" + self.loginEntry.get() + "'"        cursor.execute(sql)        db.close()                status = False        for record in cursor:            if self.cancelResIDInput.get() == str(record[0]):                if record[1] == 0:                    status = True        if status == False:            self.message = messagebox.showerror("Error", "Sorry this is not a valid reservation")        elif status == True:            self.findResCancel()            def findResCancel(self):        self.cancelRes.withdraw()        self.findCancelRes = Toplevel(self.cancelRes)        self.findCancelRes.title("Cancel Reservation")        self.findCancelResTitle = Label(self.findCancelRes, text = "Cancel Reservation")        self.findCancelResTitle.grid(row = 0, column = 0, columnspan = 8)        self.cancelResTrainNum = Label(self.findCancelRes, text = "Train\n(Train Number)")        self.cancelResTrainNum.grid(row = 1, column = 0)        self.cancelResTime = Label(self.findCancelRes, text = "Time\n(Duration)")        self.cancelResTime.grid(row = 1, column = 1)        self.cancelResDepart = Label(self.findCancelRes, text = "Departs From")        self.cancelResDepart.grid(row = 1, column = 2)        self.cancelResArrives = Label(self.findCancelRes, text = "Arrives At")        self.cancelResArrives.grid(row = 1, column = 3)        self.cancelResClass = Label(self.findCancelRes, text = "Class")        self.cancelResClass.grid(row = 1, column = 4)        self.cancelResPrice = Label(self.findCancelRes, text = "Price")        self.cancelResPrice.grid(row = 1, column = 5)        self.cancelResNumBags = Label(self.findCancelRes, text = "# of Bags")        self.cancelResNumBags.grid(row = 1, column = 6)        self.cancelResPassName = Label(self.findCancelRes, text = "Passenger Name")        self.cancelResPassName.grid(row = 1, column = 7)        db = self.connect()        cursor = db.cursor()        sql = "SELECT * FROM ticket natural join train_route natural join reservation where RID =" + self.cancelResIDInput.get()        cursor.execute(sql)        db.close()        allDates = []        row = 2        for record in cursor:            tNum = record[1]            passName = record[2]            tClass = record[3]            numBags = record[4]            deptDate = record[5]            allDates.append(deptDate)            deptFrom = record[6]            arriveAt = record[7]            firstClass = record[8]            secondClass = record[9]                        db1 = self.connect()            cur = db1.cursor()            sql = "SELECT * FROM stop WHERE stop.train_number= " + "'" + str(tNum) +"'" + "and (stop.name= " + "'" + str(deptFrom) + "'" + "or stop.name= " + "'" + str(arriveAt) + "') ORDER BY  `stop`.`departsTime` ASC"            cur.execute(sql)            db1.close()            tupNum = 1            changedArrival = 0            for data in cur:                print(data)                if tupNum == 1:                    departTime = data[1]                    if departTime == None:                        arriveTime = data[0]                        changedArrival = 1                elif tupNum == 2:                     if changedArrival == 0:                        arriveTime = data[0]                    if departTime == None:                        departTime = data[1]                tupNum = tupNum + 1            duration = arriveTime - departTime            aStr = deptDate.strftime("%m/%d/%Y") + "\n" + str(departTime) + " - " + str(arriveTime) + "\n(" + str(duration) + ")"            price = self.calcPrice(tClass, numBags, firstClass, secondClass)            self.tNumLabel = Label(self.findCancelRes, text = tNum)            self.tNumLabel.grid(row = row, column = 0)            self.deptDateLabel = Label(self.findCancelRes, text = aStr)            self.deptDateLabel.grid(row = row, column = 1)            self.departsLabel = Label(self.findCancelRes, text = deptFrom)            self.departsLabel.grid(row = row, column = 2)            self.arrivesLabel = Label(self.findCancelRes, text = arriveAt)            self.arrivesLabel.grid(row = row, column = 3)            self.tClassLabel = Label(self.findCancelRes, text = tClass)            self.tClassLabel.grid(row = row, column = 4)            self.priceLabel = Label(self.findCancelRes, text = price)            self.priceLabel.grid(row = row, column = 5)            self.numBagsLabel = Label(self.findCancelRes, text = numBags)            self.numBagsLabel.grid(row = row, column = 6)            self.passNameLabel = Label(self.findCancelRes, text = passName)            self.passNameLabel.grid(row = row, column = 7)            row = row + 1        self.totalCostRes = Label(self.findCancelRes, text = "Total Cost of Reservation")        self.totalCostRes.grid(row = row, column = 0, columnspan = 2)        self.dateOfCancellation = Label(self.findCancelRes, text = "Date of Cancellation")        self.dateOfCancellation.grid(row = row + 1, column = 0, columnspan = 2)        self.amt = Label(self.findCancelRes, text = "Amount to be Refunded")        self.amt.grid(row = row + 2, column = 0, columnspan = 2)                    totalCost = record[13]        dateOfCancel = datetime.date.today()        dateOfCancelStr = time.strftime("%m/%d/%Y")        resDate = min(allDates)        refund = self.calculateRefund(dateOfCancel, resDate, totalCost)        self.actualTotalCost = totalCost - refund                check = True        if resDate - dateOfCancel <= datetime.timedelta(1):            self.message = messagebox.showerror("Error", "Sorry you cannot cancel your reservation at this time")            check = False        if check == False:            refund = "n/a"            dateOfCancel = "n/a"                        self.actualCost = Label(self.findCancelRes, text = totalCost)        self.actualCost.grid(row = row, column = 2)        self.actualDate = Label(self.findCancelRes, text = dateOfCancelStr)        self.actualDate.grid(row = row + 1, column = 2)        self.actualRefund = Label(self.findCancelRes, text = str(refund))        self.actualRefund.grid(row = row + 2, column = 2)        self.backButt = Button(self.findCancelRes, text = "Back", command = self.backFromFindCancelRes)        self.backButt.grid(row = row + 3, column = 0)        self.submitButt = Button(self.findCancelRes, text = "Submit", command = self.updateCancelRes)        self.submitButt.grid(row = row + 3, column = 1)        if check == False:            self.submitButt.config(state = "disabled")                def calculateRefund(self, dateOfCancel, resDate, totalCost):        refund = 0        if resDate - dateOfCancel > datetime.timedelta(7):            refund = totalCost * 0.8        elif resDate - dateOfCancel < datetime.timedelta(7) and resDate - dateOfCancel > datetime.timedelta(1):            refund = totalCost * 0.5        refund = refund - 50        return max(0, refund)                       def backFromFindCancelRes(self):        self.findCancelRes.destroy()        self.cancelRes.deiconify()    def updateCancelRes(self):        updatedCost = self.actualTotalCost        db = self.connect()        cursor = db.cursor()        sql = "UPDATE reservation set isCancelled = 1, total_cost = " + "'"+ str(updatedCost)+ "'" + "where RID =" + self.cancelResIDInput.get()        cursor.execute(sql)        db.commit()        db.close()        self.message = messagebox.showinfo("Success!", "Reservation has successfully been cancelled")    def backFromCancelRes(self):        self.cancelRes.withdraw()        self.chooseFunc.deiconify()                    def giveReview(self):        self.chooseFunc.withdraw()        self.giveReview = Toplevel()        self.giveReview.title("Give Review")        self.giveReviewTitle = Label(self.giveReview, text = "Give Review")        self.giveReviewTitle.grid(row = 0, column = 0, columnspan = 2)        self.trainNumL = Label(self.giveReview, text = "Train Number")        self.trainNumL.grid(row = 1, column = 0)        self.trainNumE = Entry(self.giveReview)        self.trainNumE.grid(row = 1, column = 1)        self.rating = Label(self.giveReview, text = "Rating")        self.rating.grid(row = 2, column = 0)        self.ratingVar = StringVar(self.giveReview)        self.ratingVar.set("Choose...")        self.ratingList = ["very good", "good", "neutral", "bad", "very bad"]        self.ratingDrop = OptionMenu(self.giveReview, self.ratingVar, *self.ratingList)        self.ratingDrop.grid(row = 2, column = 1)        self.comment = Label(self.giveReview, text = "Comment")        self.comment.grid(row = 3, column=0)        self.commentEntry = Entry(self.giveReview)        self.commentEntry.grid(row = 3, column = 1)        self.submit = Button(self.giveReview, text = "Submit", command = self.addReview)        self.submit.grid(row = 4, column = 1)        self.backButt = Button(self.giveReview, text = "Back", command = self.backFromGiveReview)        self.backButt.grid(row = 4, column = 0)    def backFromGiveReview(self):        self.giveReview.withdraw()        self.chooseFunc.deiconify()    def addReview(self):        try:            trainNum = int(self.trainNumE.get())        except:            self.message = messagebox.showerror("Error!", "Please enter a rating and train number!")            return;        rating = self.ratingVar.get()        comment = self.commentEntry.get()        username = self.loginEntry.get()        db = self.connect()        cursor = db.cursor()        sql = "SELECT train_number FROM train_route"        cursor.execute(sql)        db.close()        status = False        for record in cursor:            if record[0] == trainNum:                status = True                if rating == "Choose..." or trainNum == "":            self.message = messagebox.showerror("Error!", "Please enter a rating and train number!")            return;        elif status == False:            self.message = messagebox.showerror("Error!", "Train doesn't exist! Enter valid train number!")            return;        if status == True:            db = self.connect()            cursor = db.cursor()            cursor.execute("""INSERT INTO review (train_number, username, comment, rating) VALUES (%s, %s, %s, %s)""", (trainNum, username, comment, rating))            db.commit()            db.close()            self.message = messagebox.showinfo("Success!", "Review added!")            def viewReview(self):        self.chooseFunc.withdraw()        self.viewReview = Toplevel()        self.viewReview.title("View reviews")        self.viewReviewLabel = Label(self.viewReview, text = "View Review")        self.viewReviewLabel.grid(row = 0, column = 0, columnspan = 2)        self.trainNumLabel = Label(self.viewReview, text = "Train Number")        self.trainNumLabel.grid(row = 1, column = 0)        self.trainNumEntry = Entry(self.viewReview)        self.trainNumEntry.grid(row = 1, column = 1)        self.viewReviewBack = Button(self.viewReview, text = "Back", command = self.backFromViewReview)        self.viewReviewBack.grid(row = 2, column = 0)        self.next = Button(self.viewReview, text = "Next", command = self.showReview)        self.next.grid(row = 2, column = 1)    def backFromViewReview(self):        self.chooseFunc.deiconify()        self.viewReview.withdraw()    def showReview(self):        ##Takes train num and pulls up reviews from db based on that        try:            trainNum = int(self.trainNumEntry.get())        except:            self.message = messagebox.showerror("Error!", "Please enter a train number you incompetent user!")            return;        self.viewReview.withdraw()        self.showReview = Toplevel()        self.showReview.title("Show review")        self.showReviewLabel = Label(self.showReview, text = "View Review")        self.showReviewLabel.grid(row = 0, column = 0)        self.back = Button(self.showReviewLabel, text = "Back to Choose Functionality", command = self.backFromShowReview)        self.back.grid(row = 2, column = 0)        db = self.connect()        cursor = db.cursor()        sql = "SELECT train_number FROM train_route"        cursor.execute(sql)        db.close()                status = False        for record in cursor:            if record[0] == trainNum:                status = True        if status == False:            self.message = messagebox.showerror("Error!", "Train doesn't exist! Enter valid train number!")        if status == True:            self.ratingLabel = Label(self.showReview, text = "Rating")            self.commentLabel = Label(self.showReview, text = "Comments")            self.ratingLabel.grid(row = 4, column = 0)            self.commentLabel.grid(row = 4, column = 1)            db = self.connect()            cursor = db.cursor()            sql = "Select * FROM review WHERE train_number = " + str(trainNum)            cursor.execute(sql)            db.close()            cur = 5            for review in cursor:                self.comment = Label(self.showReview, text = review[3])                self.rating = Label(self.showReview, text = review[4])                self.comment.grid(row=cur,column=1)                self.rating.grid(row=cur,column=0)                cur += 1    def backFromShowReview(self):        self.showReview.withdraw()        self.chooseFunc.deiconify()             def schoolInfo(self):        ##GUI stuff for schoolInfo page        self.chooseFunc.withdraw()        self.schoolInfo = Toplevel()        self.schoolInfo.title("School Information")        self.schoolInfoLabel = Label(self.schoolInfo,text="Add School Info")        self.schoolemailLabel = Label(self.schoolInfo,text="School Email Address")        self.backButton = Button(self.schoolInfo,text="Back",command=self.backFromSchoolInfo)        self.submitButton = Button(self.schoolInfo,text="Submit",command=self.onSubmitSchoolInfo)        self.emailEntry = Entry(self.schoolInfo)        self.schoolInfoLabel.grid(row=0,column=1)        self.schoolemailLabel.grid(row=1,column=0)        self.backButton.grid(row=2,column=1,sticky="W")        self.submitButton.grid(row=2,column=1,sticky="E")        self.emailEntry.grid(row=1,column=1)            def backFromSchoolInfo(self):        ##Exists schoolInfo page, back to chooseFunc page        self.schoolInfo.withdraw()        self.chooseFunc.deiconify()            def onSubmitSchoolInfo(self):        ##Submits the school information, check + add to db        schoolemail = self.emailEntry.get()        if schoolemail.find("edu") != -1:            db = self.connect()            cursor = db.cursor()            sql = "UPDATE customer SET isStudent = 1 WHERE username = %s"            cursor.execute(sql , self.loginEntry.get())            db.commit()            db.close()            messagebox.showinfo("Accepted","Student Success!")            def onLogout(self):        ##Exists chooseFunc page, back to login page        self.chooseFunc.withdraw()        self.win.deiconify()            def registerPage(self):        ##GUI stuff for registration page        self.win.withdraw()        self.register = Toplevel()        self.register.title("User Registration")        self.label = Label(self.register,text="New User Registration")        self.usernameLabel = Label(self.register,text="Username")        self.emailLabel = Label(self.register,text="Email Address")        self.passwordLabel = Label(self.register,text="Password")        self.confirmPasswordLabel = Label(self.register,text="Confirm Password")        self.usernameEntry = Entry(self.register)        self.emailEntry = Entry(self.register)        self.passwordEntry = Entry(self.register,show="*")        self.confirmpasswordEntry = Entry(self.register,show="*")        self.createButton = Button(self.register,text="Create",command=self.addUser)        self.label.grid(row=0,column=1,sticky="W")        self.usernameLabel.grid(row=1,column=0)        self.emailLabel.grid(row=2,column=0)        self.passwordLabel.grid(row=3,column=0)        self.confirmPasswordLabel.grid(row=4,column=0)        self.usernameEntry.grid(row=1,column=1)        self.emailEntry.grid(row=2,column=1)        self.passwordEntry.grid(row=3,column=1)        self.confirmpasswordEntry.grid(row=4,column=1)        self.createButton.grid(row=5,column=1)            def addUser(self):        ##Creates user after registration, check fields + add to db        username = self.usernameEntry.get()        email = self.emailEntry.get()        password = self.passwordEntry.get()        checkPass = self.confirmpasswordEntry.get()        status = True                if username == "" or email == "" or password == "" or checkPass == "":            self.message = messagebox.showerror("Error", "All fields must be filled!")            status = False        elif password != checkPass:            self.message = messagebox.showerror("Error", "Passwords must match!")            status = False        elif email.find("@") == -1:            self.message = messagebox.showerror("Error", "Invalid email")            status = False        db = self.connect()        cursor = db.cursor()        sql = "SELECT username, email FROM customer"        cursor.execute(sql)        db.close()        if status == True:            for record in cursor:                existsUser = record[0]                existsEmail = record[1]                if existsUser == username:                    self.message = messagebox.showerror("Error", "Username already exists!")                    status = False                if email == existsEmail:                    self.message = messagebox.showerror("Error", "Email already exists!")                    status = False        if status == True:            db = self.connect()            cursor = db.cursor()            cursor.execute("""INSERT INTO customer (username, password, email) VALUES (%s, %s, %s)""", (username, password, email))            db.commit()            db.close()            self.message = messagebox.showinfo("Success", "You are registered!")            self.register.withdraw()            self.win.deiconify()            def onQuit(self):        ##Closes entire application        self.win.withdraw()    def chooseFuncManager(self):        self.win.withdraw()        self.chooseFuncManager = Toplevel()        self.chooseFuncManager.title("Manager View")        self.title = Label(self.chooseFuncManager, text = "Choose Functionality")        self.revReport = Button(self.chooseFuncManager, text = "View Revenue Report", command = self.viewRevReport)        self.popRoute = Button(self.chooseFuncManager, text = "View Popular Route Report", command = self.viewPopRoute)        self.logoutButt = Button(self.chooseFuncManager, text = "Logout", command = self.logoutButt)        self.title.grid(row = 0, column = 0)        self.revReport.grid(row = 1, column = 0)        self.popRoute.grid(row = 2, column = 0)        self.logoutButt.grid(row = 3, column = 0)    def logoutButt(self):        self.chooseFuncManager.withdraw()        self.win.deiconify()    def viewRevReport(self):        self.chooseFuncManager.withdraw()        self.viewRevReport = Toplevel()        self.viewRevReport.title("Revenue Report")        self.label = Label(self.viewRevReport, text = "View Revenue Report")        self.label.grid(row = 0, column = 0, columnspan = 2)        self.back = Button(self.viewRevReport, text = "Back", command = self.backToFuncManager)        self.back.grid(row = 5, column = 0)        self.db = self.connect()        self.cursor = self.db.cursor()        self.sql = "SELECT EXTRACT(MONTH FROM X.departure_date),SUM(total_cost) FROM (SELECT * FROM ticket NATURAL JOIN reservation) AS X WHERE EXTRACT(MONTH FROM X.departure_date) = 3 OR EXTRACT(MONTH FROM X.departure_date) = 4 OR EXTRACT(MONTH FROM X.departure_date) = 5 GROUP BY (EXTRACT(MONTH FROM X.departure_date))"        self.cursor.execute(self.sql)        self.monthList = []        self.current_row = 2        self.index = 0        self.monthNames = ["March", "April", "May"]        self.header = Label(self.viewRevReport, text = "Month")        self.header.grid(row = 1, column = 0)        self.nextHeader = Label(self.viewRevReport, text = "Revenue")        self.nextHeader.grid(row = 1, column = 1)        for i in self.cursor:            self.monthList.append(i)        for x in self.monthList:            self.monthLabel = Label(self.viewRevReport, text = self.monthNames[self.index])            self.monthLabel.grid(row = self.current_row, column = 0)            self.valLabelle = Label(self.viewRevReport, text = "$ " + str(x[1]))            self.valLabelle.grid(row = self.current_row, column = 1)            self.index += 1            self.current_row += 1                        def backToFuncManager(self):        self.viewRevReport.withdraw()        self.chooseFuncManager.deiconify()            def viewPopRoute(self):        self.chooseFuncManager.withdraw()        self.viewPopRoute = Toplevel()        self.viewPopRoute.title("Popular Routes")        self.label = Label(self.viewPopRoute, text = "View Popular Route Report")        self.label.grid(row = 0, column = 0, columnspan = 2)        self.backButt = Button(self.viewPopRoute, text = "Back", command = self.backToManagerScreen)        self.backButt.grid(row = 15, column = 0)        self.monthLabel = Label(self.viewPopRoute, text="Month")        self.trainLabel = Label(self.viewPopRoute, text ="Popular Train")        self.monthLabel.grid(row=1,column = 0)        self.trainLabel.grid(row=1,column=1)        self.popularityLabel = Label(self.viewPopRoute,text="Popularity")        self.popularityLabel.grid(row=1,column=2)                #SQL        db = self.connect()        cursor = db.cursor()        cursor.execute("SELECT * FROM (SELECT EXTRACT(MONTH FROM departure_date) AS Month,train_number,COUNT(train_number) AS popularity " +                       "FROM ticket LEFT JOIN reservation ON ticket.rid = reservation.rid WHERE isCancelled =0 " + "GROUP BY `Month`,train_number ORDER BY `popularity`  DESC) AS X " +                       "WHERE MONTH = 3 ORDER BY `X`.`popularity` DESC LIMIT 3")        r = 2        for record in cursor:            m3 = Label(self.viewPopRoute,text=record[0])            m3.grid(row=2,column=0)            p3 = Label(self.viewPopRoute,text=record[1])            p3.grid(row=r,column=1)            t3 = Label(self.viewPopRoute,text=record[2])            t3.grid(row=r,column=2)            r = r + 1        cursor.execute("SELECT * FROM (SELECT EXTRACT(MONTH FROM departure_date) AS Month,train_number,COUNT(train_number) AS popularity " +                       "FROM ticket LEFT JOIN reservation ON ticket.rid = reservation.rid WHERE isCancelled =0 " + "GROUP BY `Month`,train_number ORDER BY `popularity`  DESC) AS X " +                       "WHERE MONTH = 4 ORDER BY `X`.`popularity` DESC LIMIT 3")        r1 = 6        for record1 in cursor:            m31 = Label(self.viewPopRoute,text=record1[0])            m31.grid(row=6,column=0)            p31 = Label(self.viewPopRoute,text=record1[1])            p31.grid(row=r1,column=1)            t31 = Label(self.viewPopRoute,text=record1[2])            t31.grid(row=r1,column=2)            r1 = r1 + 1        cursor.execute("SELECT * FROM (SELECT EXTRACT(MONTH FROM departure_date) AS Month,train_number,COUNT(train_number) AS popularity " +                       "FROM ticket LEFT JOIN reservation ON ticket.rid = reservation.rid WHERE isCancelled =0 " + "GROUP BY `Month`,train_number ORDER BY `popularity`  DESC) AS X " +                       "WHERE MONTH = 5 ORDER BY `X`.`popularity` DESC LIMIT 3")        r2 = 9        for record2 in cursor:            m32 = Label(self.viewPopRoute,text=record2[0])            m32.grid(row=9,column=0)            p32 = Label(self.viewPopRoute,text=record2[1])            p32.grid(row=r2,column=1)            t32 = Label(self.viewPopRoute,text=record2[2])            t32.grid(row=r2,column=2)                        r2 = r2 + 1        db.close()            def backToManagerScreen(self):        self.viewPopRoute.withdraw()        self.chooseFuncManager.deiconify()rootWin = Tk()app = GUI(rootWin)rootWin.mainloop()